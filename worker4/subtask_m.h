//
// Generated file, do not edit! Created by opp_msgtool 6.0 from subtask.msg.
//

#ifndef __SUBTASK_M_H
#define __SUBTASK_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Subtask;
// cplusplus {{
#include "job_base.h"  // assuming that MyClass is declared here
typedef subtask_base subtask_base; 
// }}

/**
 * Class generated from <tt>subtask.msg:28</tt> by opp_msgtool.
 * <pre>
 * message Subtask
 * {
 *     subtask_base *subtask;
 * }
 * </pre>
 */
class Subtask : public ::omnetpp::cMessage
{
  protected:
    subtask_base * subtask = nullptr;

  private:
    void copy(const Subtask& other);

  protected:
    bool operator==(const Subtask&) = delete;

  public:
    Subtask(const char *name=nullptr, short kind=0);
    Subtask(const Subtask& other);
    virtual ~Subtask();
    Subtask& operator=(const Subtask& other);
    virtual Subtask *dup() const override {return new Subtask(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const subtask_base * getSubtask() const;
    virtual subtask_base * getSubtaskForUpdate() { return const_cast<subtask_base *>(const_cast<Subtask*>(this)->getSubtask());}
    virtual void setSubtask(subtask_base * subtask);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Subtask& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Subtask& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const subtask_base *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline subtask_base *fromAnyPtr(any_ptr ptr) { return ptr.get<subtask_base>(); }
template<> inline Subtask *fromAnyPtr(any_ptr ptr) { return check_and_cast<Subtask*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SUBTASK_M_H

