//
// Generated file, do not edit! Created by opp_msgtool 6.0 from state.msg.
//

#ifndef __STATE_M_H
#define __STATE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class State;
// cplusplus {{
#include "state_base.h"  // assuming that MyClass is declared here
typedef state_base state_base; 
// }}

/**
 * Class generated from <tt>state.msg:23</tt> by opp_msgtool.
 * <pre>
 * message State
 * {
 *     state_base *state;
 * }
 * </pre>
 */
class State : public ::omnetpp::cMessage
{
  protected:
    state_base * state = nullptr;

  private:
    void copy(const State& other);

  protected:
    bool operator==(const State&) = delete;

  public:
    State(const char *name=nullptr, short kind=0);
    State(const State& other);
    virtual ~State();
    State& operator=(const State& other);
    virtual State *dup() const override {return new State(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const state_base * getState() const;
    virtual state_base * getStateForUpdate() { return const_cast<state_base *>(const_cast<State*>(this)->getState());}
    virtual void setState(state_base * state);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const State& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, State& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const state_base *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline state_base *fromAnyPtr(any_ptr ptr) { return ptr.get<state_base>(); }
template<> inline State *fromAnyPtr(any_ptr ptr) { return check_and_cast<State*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __STATE_M_H

