//
// Generated file, do not edit! Created by opp_msgtool 6.0 from output.msg.
//

#ifndef __OUTPUT_M_H
#define __OUTPUT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Output;
// cplusplus {{
#include "job_base.h"  // assuming that MyClass is declared here
typedef subtask_base subtask_base; 
// }}

/**
 * Class generated from <tt>output.msg:28</tt> by opp_msgtool.
 * <pre>
 * message Output
 * {
 *     output_base *output;
 * }
 * </pre>
 */
class Output : public ::omnetpp::cMessage
{
  protected:
    output_base * output = nullptr;

  private:
    void copy(const Output& other);

  protected:
    bool operator==(const Output&) = delete;

  public:
    Output(const char *name=nullptr, short kind=0);
    Output(const Output& other);
    virtual ~Output();
    Output& operator=(const Output& other);
    virtual Output *dup() const override {return new Output(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const output_base * getOutput() const;
    virtual output_base * getOutputForUpdate() { return const_cast<output_base *>(const_cast<Output*>(this)->getOutput());}
    virtual void setOutput(output_base * output);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Output& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Output& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const output_base *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline output_base *fromAnyPtr(any_ptr ptr) { return ptr.get<output_base>(); }
template<> inline Output *fromAnyPtr(any_ptr ptr) { return check_and_cast<Output*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __OUTPUT_M_H

